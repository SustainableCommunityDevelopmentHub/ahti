meta(charset='UTF-8')
title CodePen Demo
meta(name='robots', content='noindex')
link(rel='shortcut icon', type='image/x-icon', href='https://static.codepen.io/assets/favicon/favicon-aec34940fbc1a6e787974dcd360f2c6b63348d4b1f4e06c77743096d55480f33.ico')
link(rel='mask-icon', type, href='https://static.codepen.io/assets/favicon/logo-pin-8f3771b1072e3c38bd662872f6b673a722f4b3ca2421637d5596661b4e2132cc.svg', color='#111')
link(rel='canonical', href='https://codepen.io/clindsey/pen/VGXGVB')
link(rel='stylesheet', href='https://fonts.googleapis.com/css?family=Fira+Sans+Condensed:300,600')
style.INLINE_PEN_STYLESHEET_ID.
  
  @charset "UTF-8";
  /* ==========================================================================
     #BOX-SIZING
     ========================================================================== */
  /**
   * More sensible default box-sizing:
   * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
   */
  html {
    box-sizing: border-box;
  }
  
  *, *:before, *:after {
    box-sizing: inherit;
  }
  
  /*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */
  /**
   * 1. Change the default font family in all browsers (opinionated).
   * 2. Correct the line height in all browsers.
   * 3. Prevent adjustments of font size after orientation changes in
   *    IE on Windows Phone and in iOS.
   */
  /* Document
     ========================================================================== */
  html {
    font-family: sans-serif;
    /* 1 */
    line-height: 1.15;
    /* 2 */
    -ms-text-size-adjust: 100%;
    /* 3 */
    -webkit-text-size-adjust: 100%;
    /* 3 */
  }
  
  /* Sections
     ========================================================================== */
  /**
   * Remove the margin in all browsers (opinionated).
   */
  body {
    margin: 0;
  }
  
  /**
   * Add the correct display in IE 9-.
   */
  article,
  aside,
  footer,
  header,
  nav,
  section {
    display: block;
  }
  
  /**
   * Correct the font size and margin on `h1` elements within `section` and
   * `article` contexts in Chrome, Firefox, and Safari.
   */
  h1 {
    font-size: 2em;
    margin: 0.67em 0;
  }
  
  /* Grouping content
     ========================================================================== */
  /**
   * Add the correct display in IE 9-.
   * 1. Add the correct display in IE.
   */
  figcaption,
  figure,
  main {
    /* 1 */
    display: block;
  }
  
  /**
   * Add the correct margin in IE 8.
   */
  figure {
    margin: 1em 40px;
  }
  
  /**
   * 1. Add the correct box sizing in Firefox.
   * 2. Show the overflow in Edge and IE.
   */
  hr {
    box-sizing: content-box;
    /* 1 */
    height: 0;
    /* 1 */
    overflow: visible;
    /* 2 */
  }
  
  /**
   * 1. Correct the inheritance and scaling of font size in all browsers.
   * 2. Correct the odd `em` font sizing in all browsers.
   */
  pre {
    font-family: monospace, monospace;
    /* 1 */
    font-size: 1em;
    /* 2 */
  }
  
  /* Text-level semantics
     ========================================================================== */
  /**
   * 1. Remove the gray background on active links in IE 10.
   * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
   */
  a {
    background-color: transparent;
    /* 1 */
    -webkit-text-decoration-skip: objects;
    /* 2 */
  }
  
  /**
   * Remove the outline on focused links when they are also active or hovered
   * in all browsers (opinionated).
   */
  a:active,
  a:hover {
    outline-width: 0;
  }
  
  /**
   * 1. Remove the bottom border in Firefox 39-.
   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
   */
  abbr[title] {
    border-bottom: none;
    /* 1 */
    text-decoration: underline;
    /* 2 */
    text-decoration: underline dotted;
    /* 2 */
  }
  
  /**
   * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
   */
  b,
  strong {
    font-weight: inherit;
  }
  
  /**
   * Add the correct font weight in Chrome, Edge, and Safari.
   */
  b,
  strong {
    font-weight: bolder;
  }
  
  /**
   * 1. Correct the inheritance and scaling of font size in all browsers.
   * 2. Correct the odd `em` font sizing in all browsers.
   */
  code,
  kbd,
  samp {
    font-family: monospace, monospace;
    /* 1 */
    font-size: 1em;
    /* 2 */
  }
  
  /**
   * Add the correct font style in Android 4.3-.
   */
  dfn {
    font-style: italic;
  }
  
  /**
   * Add the correct background and color in IE 9-.
   */
  mark {
    background-color: #ff0;
    color: #000;
  }
  
  /**
   * Add the correct font size in all browsers.
   */
  small {
    font-size: 80%;
  }
  
  /**
   * Prevent `sub` and `sup` elements from affecting the line height in
   * all browsers.
   */
  sub,
  sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  
  sub {
    bottom: -0.25em;
  }
  
  sup {
    top: -0.5em;
  }
  
  /* Embedded content
     ========================================================================== */
  /**
   * Add the correct display in IE 9-.
   */
  audio,
  video {
    display: inline-block;
  }
  
  /**
   * Add the correct display in iOS 4-7.
   */
  audio:not([controls]) {
    display: none;
    height: 0;
  }
  
  /**
   * Remove the border on images inside links in IE 10-.
   */
  img {
    border-style: none;
  }
  
  /**
   * Hide the overflow in IE.
   */
  svg:not(:root) {
    overflow: hidden;
  }
  
  /* Forms
     ========================================================================== */
  /**
   * 1. Change the font styles in all browsers (opinionated).
   * 2. Remove the margin in Firefox and Safari.
   */
  button,
  input,
  optgroup,
  select,
  textarea {
    font-family: sans-serif;
    /* 1 */
    font-size: 100%;
    /* 1 */
    line-height: 1.15;
    /* 1 */
    margin: 0;
    /* 2 */
  }
  
  /**
   * Show the overflow in IE.
   * 1. Show the overflow in Edge.
   */
  button,
  input {
    /* 1 */
    overflow: visible;
  }
  
  /**
   * Remove the inheritance of text transform in Edge, Firefox, and IE.
   * 1. Remove the inheritance of text transform in Firefox.
   */
  button,
  select {
    /* 1 */
    text-transform: none;
  }
  
  /**
   * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
   *    controls in Android 4.
   * 2. Correct the inability to style clickable types in iOS and Safari.
   */
  button,
  html [type="button"],
  [type="reset"],
  [type="submit"] {
    -webkit-appearance: button;
    /* 2 */
  }
  
  /**
   * Remove the inner border and padding in Firefox.
   */
  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0;
  }
  
  /**
   * Restore the focus styles unset by the previous rule.
   */
  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText;
  }
  
  /**
   * Change the border, margin, and padding in all browsers (opinionated).
   */
  fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
  }
  
  /**
   * 1. Correct the text wrapping in Edge and IE.
   * 2. Correct the color inheritance from `fieldset` elements in IE.
   * 3. Remove the padding so developers are not caught out when they zero out
   *    `fieldset` elements in all browsers.
   */
  legend {
    box-sizing: border-box;
    /* 1 */
    color: inherit;
    /* 2 */
    display: table;
    /* 1 */
    max-width: 100%;
    /* 1 */
    padding: 0;
    /* 3 */
    white-space: normal;
    /* 1 */
  }
  
  /**
   * 1. Add the correct display in IE 9-.
   * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
   */
  progress {
    display: inline-block;
    /* 1 */
    vertical-align: baseline;
    /* 2 */
  }
  
  /**
   * Remove the default vertical scrollbar in IE.
   */
  textarea {
    overflow: auto;
  }
  
  /**
   * 1. Add the correct box sizing in IE 10-.
   * 2. Remove the padding in IE 10-.
   */
  [type="checkbox"],
  [type="radio"] {
    box-sizing: border-box;
    /* 1 */
    padding: 0;
    /* 2 */
  }
  
  /**
   * Correct the cursor style of increment and decrement buttons in Chrome.
   */
  [type="number"]::-webkit-inner-spin-button,
  [type="number"]::-webkit-outer-spin-button {
    height: auto;
  }
  
  /**
   * 1. Correct the odd appearance in Chrome and Safari.
   * 2. Correct the outline style in Safari.
   */
  [type="search"] {
    -webkit-appearance: textfield;
    /* 1 */
    outline-offset: -2px;
    /* 2 */
  }
  
  /**
   * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
   */
  [type="search"]::-webkit-search-cancel-button,
  [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  
  /**
   * 1. Correct the inability to style clickable types in iOS and Safari.
   * 2. Change font properties to `inherit` in Safari.
   */
  ::-webkit-file-upload-button {
    -webkit-appearance: button;
    /* 1 */
    font: inherit;
    /* 2 */
  }
  
  /* Interactive
     ========================================================================== */
  /*
   * Add the correct display in IE 9-.
   * 1. Add the correct display in Edge, IE, and Firefox.
   */
  details,
  menu {
    display: block;
  }
  
  /*
   * Add the correct display in all browsers.
   */
  summary {
    display: list-item;
  }
  
  /* Scripting
     ========================================================================== */
  /**
   * Add the correct display in IE 9-.
   */
  canvas {
    display: inline-block;
  }
  
  /**
   * Add the correct display in IE.
   */
  template {
    display: none;
  }
  
  /* Hidden
     ========================================================================== */
  /**
   * Add the correct display in IE 10-.
   */
  [hidden] {
    display: none;
  }
  
  /* ==========================================================================
     #RESET
     ========================================================================== */
  /**
   * A very simple reset that sits on top of Normalize.css.
   */
  body,
  h1, h2, h3, h4, h5, h6,
  blockquote, p, pre,
  dl, dd, ol, ul,
  figure,
  hr,
  fieldset, legend {
    margin: 0;
    padding: 0;
  }
  
  /**
   * Remove trailing margins from nested lists.
   */
  li > ol,
  li > ul {
    margin-bottom: 0;
  }
  
  /**
   * Remove default table spacing.
   */
  table {
    border-collapse: collapse;
    border-spacing: 0;
  }
  
  /**
   * 1. Reset Chrome and Firefox behaviour which sets a `min-width: min-content;`
   *    on fieldsets.
   */
  fieldset {
    min-width: 0;
    /* [1] */
    border: 0;
  }
  
  /* ==========================================================================
     #SHARED
     ========================================================================== */
  /**
   * Shared declarations for certain elements.
   */
  /**
   * Always declare margins in the same direction:
   * csswizardry.com/2012/06/single-direction-margin-declarations
   */
  /* stylelint-disable selector-list-comma-newline-after */
  address,
  h1, h2, h3, h4, h5, h6,
  blockquote, p, pre,
  dl, ol, ul,
  figure,
  hr,
  table,
  fieldset {
    margin-bottom: 24px;
    margin-bottom: 1.5rem;
  }
  
  /**
   * Consistent indentation for lists.
   */
  dd, ol, ul {
    margin-left: 24px;
    margin-left: 1.5rem;
  }
  
  /* stylelint-enable selector-list-comma-newline-after */
  /* ==========================================================================
     #PAGE
     ========================================================================== */
  /**
   * Simple page-level setup.
   *
   * 1. Set the default `font-size` and `line-height` for the entire project,
   *    sourced from our default variables. The `font-size` is calculated to exist
   *    in ems, the `line-height` is calculated to exist unitlessly.
   * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
   *    navigating between pages that do/do not have enough content to produce
   *    scrollbars naturally.
   * 3. Ensure the page always fills at least the entire height of the viewport.
   */
  html {
    font-size: 1em;
    /* [1] */
    line-height: 1.5;
    /* [1] */
    overflow-y: scroll;
    /* [2] */
    min-height: 100%;
    /* [3] */
  }
  
  /* ==========================================================================
     #HEADINGS
     ========================================================================== */
  /**
   * Simple default styles for headings 1 through 6. Anything more opinionated
   * than simple font-size changes should likely be applied via classes (see:
   * https://csswizardry.com/2016/02/managing-typography-on-large-apps/).
   */
  h1 {
    font-size: 36px;
    font-size: 2.25rem;
    line-height: 1.3333333333;
  }
  
  h2 {
    font-size: 28px;
    font-size: 1.75rem;
    line-height: 1.7142857143;
  }
  
  h3 {
    font-size: 24px;
    font-size: 1.5rem;
    line-height: 1;
  }
  
  h4 {
    font-size: 20px;
    font-size: 1.25rem;
    line-height: 1.2;
  }
  
  h5 {
    font-size: 18px;
    font-size: 1.125rem;
    line-height: 1.3333333333;
  }
  
  h6 {
    font-size: 16px;
    font-size: 1rem;
    line-height: 1.5;
  }
  
  /* ==========================================================================
     #IMAGES
     ========================================================================== */
  /**
   * 1. Fluid images for responsive purposes.
   * 2. Offset `alt` text from surrounding copy.
   * 3. Setting `vertical-align` removes the whitespace that appears under `img`
   *    elements when they are dropped into a page as-is. Safer alternative to
   *    using `display: block;`.
   */
  img {
    max-width: 100%;
    /* [1] */
    font-style: italic;
    /* [2] */
    vertical-align: middle;
    /* [3] */
  }
  
  /**
   * 1. If a `width` and/or `height` attribute have been explicitly defined, let’s
   *    not make the image fluid.
   */
  img[width],
  img[height] {
    /* [1] */
    max-width: none;
  }
  
  /* ==========================================================================
     #TABLES
     ========================================================================== */
  /**
   * 1. Ensure tables fill up as much space as possible.
   */
  table {
    width: 100%;
    /* [1] */
  }
  
  /* ==========================================================================
     #WRAPPER
     ========================================================================== */
  /**
   * Page-level constraining and wrapping elements.
   */
  /* stylelint-disable */
  /* stylelint-enable */
  .o-wrapper {
    padding-right: 24px;
    padding-left: 24px;
    margin-right: auto;
    margin-left: auto;
    max-width: 1200px;
  }
  .o-wrapper:after {
    content: "" !important;
    display: block !important;
    clear: both !important;
  }
  
  /* Size variants.
     ========================================================================== */
  .o-wrapper--tiny {
    padding-right: 6px;
    padding-left: 6px;
  }
  
  .o-wrapper--small {
    padding-right: 12px;
    padding-left: 12px;
  }
  
  .o-wrapper--large {
    padding-right: 48px;
    padding-left: 48px;
  }
  
  .o-wrapper--huge {
    padding-right: 96px;
    padding-left: 96px;
  }
  
  /* ==========================================================================
     #LAYOUT
     ========================================================================== */
  /**
   * Grid-like layout system.
   *
   * The layout object provides us with a column-style layout system. This file
   * contains the basic structural elements, but classes should be complemented
   * with width utilities, for example:
   *
   *   <div class="o-layout">
   *     <div class="o-layout__item  u-1/2">
   *     </div>
   *     <div class="o-layout__item  u-1/2">
   *     </div>
   *   </div>
   *
   * The above will create a two-column structure in which each column will
   * fluidly fill half of the width of the parent. We can have more complex
   * systems:
   *
   *   <div class="o-layout">
   *     <div class="o-layout__item  u-1/1  u-1/3@medium">
   *     </div>
   *     <div class="o-layout__item  u-1/2  u-1/3@medium">
   *     </div>
   *     <div class="o-layout__item  u-1/2  u-1/3@medium">
   *     </div>
   *   </div>
   *
   * The above will create a system in which the first item will be 100% width
   * until we enter our medium breakpoint, when it will become 33.333% width. The
   * second and third items will be 50% of their parent, until they also become
   * 33.333% width at the medium breakpoint.
   *
   * We can also manipulate entire layout systems by adding a series of modifiers
   * to the `.o-layout` block. For example:
   *
   *   <div class="o-layout  o-layout--reverse">
   *
   * This will reverse the displayed order of the system so that it runs in the
   * opposite order to our source, effectively flipping the system over.
   *
   *   <div class="o-layout  o-layout--[right|center]">
   *
   * This will cause the system to fill up from either the centre or the right
   * hand side. Default behaviour is to fill up the layout system from the left.
   *
   * There are plenty more options available to us: explore them below.
   */
  /* Default/mandatory classes.
     ========================================================================== */
  /**
   * 1. Allows us to use the layout object on any type of element.
   * 2. We need to defensively reset any box-model properties.
   * 3. Use the negative margin trick for multi-row grids:
   *    https://csswizardry.com/2011/08/building-better-grid-systems/
   */
  .o-layout {
    display: block;
    /* [1] */
    margin: 0;
    /* [2] */
    padding: 0;
    /* [2] */
    list-style: none;
    /* [1] */
    margin-left: -24px;
    /* [3] */
    font-size: 0;
  }
  
  /**
   * 1. Required in order to combine fluid widths with fixed gutters.
   * 2. Allows us to manipulate grids vertically, with text-level properties,
   *    etc.
   * 3. Default item alignment is with the tops of each other, like most
   *    traditional grid/layout systems.
   * 4. By default, all layout items are full-width (mobile first).
   * 5. Gutters provided by left padding:
   *    https://csswizardry.com/2011/08/building-better-grid-systems/
   * 6. Fallback for old IEs not supporting `rem` values.
   */
  .o-layout__item {
    box-sizing: border-box;
    /* [1] */
    display: inline-block;
    /* [2] */
    vertical-align: top;
    /* [3] */
    width: 100%;
    /* [4] */
    padding-left: 24px;
    /* [5] */
    font-size: 16px;
    /* [6] */
    font-size: 1rem;
  }
  
  /* Gutter size modifiers.
     ========================================================================== */
  .o-layout--tiny {
    margin-left: -6px;
  }
  .o-layout--tiny > .o-layout__item {
    padding-left: 6px;
  }
  
  .o-layout--small {
    margin-left: -12px;
  }
  .o-layout--small > .o-layout__item {
    padding-left: 12px;
  }
  
  .o-layout--large {
    margin-left: -48px;
  }
  .o-layout--large > .o-layout__item {
    padding-left: 48px;
  }
  
  .o-layout--huge {
    margin-left: -96px;
  }
  .o-layout--huge > .o-layout__item {
    padding-left: 96px;
  }
  
  .o-layout--flush {
    margin-left: 0;
  }
  .o-layout--flush > .o-layout__item {
    padding-left: 0;
  }
  
  /* Vertical alignment modifiers.
     ========================================================================== */
  /**
   * Align all grid items to the middles of each other.
   */
  .o-layout--middle > .o-layout__item {
    vertical-align: middle;
  }
  
  /**
   * Align all grid items to the bottoms of each other.
   */
  .o-layout--bottom > .o-layout__item {
    vertical-align: bottom;
  }
  
  /* Fill order modifiers.
     ========================================================================== */
  /**
   * Fill up the layout system from the centre.
   */
  .o-layout--center {
    text-align: center;
  }
  .o-layout--center > .o-layout__item {
    text-align: left;
  }
  
  /**
   * Fill up the layout system from the right-hand side.
   */
  .o-layout--right {
    text-align: right;
  }
  .o-layout--right > .o-layout__item {
    text-align: left;
  }
  
  /**
   * Reverse the rendered order of the grid system.
   */
  .o-layout--reverse {
    direction: rtl;
  }
  .o-layout--reverse > .o-layout__item {
    direction: ltr;
    text-align: left;
  }
  
  /* ==========================================================================
     #MEDIA
     ========================================================================== */
  /**
   * Place any image- and text-like content side-by-side, as per:
   * http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
   */
  .o-media {
    display: block;
  }
  .o-media:after {
    content: "" !important;
    display: block !important;
    clear: both !important;
  }
  
  .o-media__img {
    float: left;
    margin-right: 24px;
  }
  .o-media__img > img {
    display: block;
  }
  
  .o-media__body {
    overflow: hidden;
    display: block;
  }
  .o-media__body,
  .o-media__body > :last-child {
    margin-bottom: 0;
  }
  
  /* Size variants
     ========================================================================== */
  /**
   * Modify the amount of space between our image and our text. We also have
   * reversible options for all available sizes.
   */
  .o-media--tiny > .o-media__img {
    margin-right: 6px;
  }
  .o-media--tiny.o-media--reverse > .o-media__img {
    margin-right: 0;
    margin-left: 6px;
  }
  
  .o-media--small > .o-media__img {
    margin-right: 12px;
  }
  .o-media--small.o-media--reverse > .o-media__img {
    margin-right: 0;
    margin-left: 12px;
  }
  
  .o-media--large > .o-media__img {
    margin-right: 48px;
  }
  .o-media--large.o-media--reverse > .o-media__img {
    margin-right: 0;
    margin-left: 48px;
  }
  
  .o-media--huge > .o-media__img {
    margin-right: 96px;
  }
  .o-media--huge.o-media--reverse > .o-media__img {
    margin-right: 0;
    margin-left: 96px;
  }
  
  /* Reversed media objects
     ========================================================================== */
  .o-media--reverse > .o-media__img {
    float: right;
    margin-right: 0;
    margin-left: 24px;
  }
  
  /* Gutterless media objects
     ========================================================================== */
  .o-media--flush > .o-media__img {
    margin-right: 0;
    margin-left: 0;
  }
  
  /* ==========================================================================
     #FLAG
     ========================================================================== */
  /**
   * The flag object is a design pattern similar to the media object, however it
   * utilises `display: table[-cell];` to give us control over the vertical
   * alignments of the text and image.
   *
   * https://csswizardry.com/2013/05/the-flag-object/
   *
   * 1. Allows us to control vertical alignments.
   * 2. Force the object to be the full width of its parent. Combined with [1],
   *    this makes the object behave in a quasi-`display: block;` manner.
   */
  .o-flag {
    display: table;
    /* [1] */
    width: 100%;
    /* [2] */
  }
  
  /**
   * Items within a flag object. There should only ever be one of each.
   *
   * 1. Default to aligning content to their middles.
   */
  .o-flag__img,
  .o-flag__body {
    display: table-cell;
    vertical-align: middle;
    /* [1] */
  }
  
  /**
   * Flag images have a space between them and the body of the object.
   *
   * 1. Force `.flag__img` to take up as little space as possible:
   *    https://pixelsvsbytes.com/2012/02/this-css-layout-grid-is-no-holy-grail/
   */
  .o-flag__img {
    width: 1px;
    /* [1] */
    padding-right: 24px;
    /**
     * 1. Fixes problem with images disappearing.
     */
  }
  .o-flag__img > img {
    max-width: none;
    /* [1] */
  }
  
  /**
   * The container for the main content of the flag object.
   *
   * 1. Forces the `.flag__body` to take up all remaining space.
   */
  .o-flag__body {
    width: auto;
    /* [1] */
  }
  .o-flag__body,
  .o-flag__body > :last-child {
    margin-bottom: 0;
  }
  
  /* Size variants.
     ========================================================================== */
  .o-flag--tiny > .o-flag__img {
    padding-right: 6px;
  }
  .o-flag--tiny.o-flag--reverse > .o-flag__img {
    padding-right: 0;
    padding-left: 6px;
  }
  
  .o-flag--small > .o-flag__img {
    padding-right: 12px;
  }
  .o-flag--small.o-flag--reverse > .o-flag__img {
    padding-right: 0;
    padding-left: 12px;
  }
  
  .o-flag--large > .o-flag__img {
    padding-right: 48px;
  }
  .o-flag--large.o-flag--reverse > .o-flag__img {
    padding-right: 0;
    padding-left: 48px;
  }
  
  .o-flag--huge > .o-flag__img {
    padding-right: 96px;
  }
  .o-flag--huge.o-flag--reverse > .o-flag__img {
    padding-right: 0;
    padding-left: 96px;
  }
  
  .o-flag--flush > .o-flag__img {
    padding-right: 0;
    padding-left: 0;
  }
  
  /* Reversed flag.
     ========================================================================== */
  /**
   * 1. Swap the rendered direction of the object…
   * 2. …and reset it.
   * 3. Reassign margins to the correct sides.
   */
  .o-flag--reverse {
    direction: rtl;
    /* [1] */
  }
  .o-flag--reverse > .o-flag__img,
  .o-flag--reverse > .o-flag__body {
    direction: ltr;
    /* [2] */
  }
  .o-flag--reverse > .o-flag__img {
    padding-right: 0;
    /* [3] */
    padding-left: 24px;
    /* [3] */
  }
  
  /* Alignment variants.
     ========================================================================== */
  /**
   * Vertically align the image- and body-content differently. Defaults to middle.
   */
  .o-flag--top > .o-flag__img,
  .o-flag--top > .o-flag__body {
    vertical-align: top;
  }
  
  .o-flag--bottom > .o-flag__img,
  .o-flag--bottom > .o-flag__body {
    vertical-align: bottom;
  }
  
  /* ==========================================================================
     #LIST-BARE
     ========================================================================== */
  /**
   * Strip list-like appearance from lists by removing their bullets, and any
   * indentation.
   */
  .o-list-bare {
    list-style: none;
    margin-left: 0;
  }
  
  /* ==========================================================================
     #LIST-INLINE
     ========================================================================== */
  /**
   * The list-inline object simply displays a list of items in one line.
   */
  .o-list-inline {
    margin-left: 0;
    list-style: none;
  }
  
  .o-list-inline__item {
    display: inline-block;
  }
  
  /* ==========================================================================
     #BOX
     ========================================================================== */
  /**
   * The box object simply boxes off content. Extend with cosmetic styles in the
   * Components layer.
   *
   * 1. So we can apply the `.o-box` class to naturally-inline elements.
   */
  .o-box {
    display: block;
    /* [1] */
    padding: 24px;
  }
  .o-box:after {
    content: "" !important;
    display: block !important;
    clear: both !important;
  }
  .o-box > :last-child {
    margin-bottom: 0;
  }
  
  /* Size variants
     ========================================================================== */
  .o-box--flush {
    padding: 0;
  }
  
  .o-box--tiny {
    padding: 6px;
  }
  
  .o-box--small {
    padding: 12px;
  }
  
  .o-box--large {
    padding: 48px;
  }
  
  .o-box--huge {
    padding: 96px;
  }
  
  /* ==========================================================================
     #BLOCK
     ========================================================================== */
  /**
   * Stacked image-with-text object. A simple abstraction to cover a very commonly
   * occurring design pattern.
   */
  .o-block {
    display: block;
    text-align: center;
  }
  
  .o-block__img {
    margin-bottom: 24px;
    /* Size variants.
       ====================================================================== */
  }
  .o-block--flush > .o-block__img {
    margin-bottom: 0;
  }
  .o-block--tiny > .o-block__img {
    margin-bottom: 6px;
  }
  .o-block--small > .o-block__img {
    margin-bottom: 12px;
  }
  .o-block--large > .o-block__img {
    margin-bottom: 48px;
  }
  .o-block--huge > .o-block__img {
    margin-bottom: 96px;
  }
  
  .o-block__body {
    display: block;
  }
  
  /* Alignment variants.
     ========================================================================== */
  .o-block--right {
    text-align: right;
  }
  
  .o-block--left {
    text-align: left;
  }
  
  /* ==========================================================================
     #RATIO
     ========================================================================== */
  /**
   * Create ratio-bound content blocks, to keep media (e.g. images, videos) in
   * their correct aspect ratios.
   *
   * http://alistapart.com/article/creating-intrinsic-ratios-for-video
   *
   * 1. Default cropping is a 1:1 ratio (i.e. a perfect square).
   */
  .o-ratio {
    position: relative;
    display: block;
    overflow: hidden;
  }
  .o-ratio:before {
    content: "";
    display: block;
    width: 100%;
    padding-bottom: 100%;
    /* [1] */
  }
  
  .o-ratio__content,
  .o-ratio > iframe,
  .o-ratio > embed,
  .o-ratio > object {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    height: 100%;
    width: 100%;
  }
  
  /* stylelint-disable */
  /* Ratio variants.
     ========================================================================== */
  /**
   * Generate a series of ratio classes to be used like so:
   *
   *   <div class="o-ratio  o-ratio--16:9">
   *
   */
  .o-ratio--2\:1:before {
    padding-bottom: 50%;
  }
  
  .o-ratio--4\:3:before {
    padding-bottom: 75%;
  }
  
  .o-ratio--16\:9:before {
    padding-bottom: 56.25%;
  }
  
  /* stylelint-enable */
  /* ==========================================================================
     #CROP
     ========================================================================== */
  /**
   * Provide a cropping container in order to display media (usually images)
   * cropped to certain ratios.
   *
   * 1. Set up a positioning context in which the image can sit.
   * 2. This is the crucial part: where the cropping happens.
   */
  .o-crop {
    position: relative;
    /* [1] */
    display: block;
    overflow: hidden;
    /* [2] */
  }
  
  /**
   * Apply this class to the content (usually `img`) that needs cropping.
   *
   * 1. Image’s default positioning is top-left in the cropping box.
   * 2. Make sure the media doesn’t stop itself too soon.
   */
  .o-crop__content {
    position: absolute;
    top: 0;
    /* [1] */
    left: 0;
    /* [1] */
    max-width: none;
    /* [2] */
  }
  
  /**
   * We can position the media in different locations within the cropping area.
   */
  .o-crop__content--right {
    right: 0;
    left: auto;
  }
  
  .o-crop__content--bottom {
    top: auto;
    bottom: 0;
  }
  
  .o-crop__content--center {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  
  /* stylelint-disable */
  /* Crop-ratio variants.
     ========================================================================== */
  /**
   * Generate a series of crop classes to be used like so:
   *
   *   <div class="o-crop  o-crop--16:9">
   *
   */
  .o-crop--2\:1 {
    padding-bottom: 50%;
  }
  
  .o-crop--4\:3 {
    padding-bottom: 75%;
  }
  
  .o-crop--16\:9 {
    padding-bottom: 56.25%;
  }
  
  /* stylelint-enable */
  /* ==========================================================================
     #TABLE
     ========================================================================== */
  /**
   * A simple object for manipulating the structure of HTML `table`s.
   */
  .o-table {
    width: 100%;
  }
  
  /* Equal-width table cells.
     ========================================================================== */
  /**
   * `table-layout: fixed` forces all cells within a table to occupy the same
   * width as each other. This also has performance benefits: because the browser
   * does not need to (re)calculate cell dimensions based on content it discovers,
   * the table can be rendered very quickly. Further reading:
   * https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout#Values
   */
  .o-table--fixed {
    table-layout: fixed;
  }
  
  /* Size variants.
     ========================================================================== */
  .o-table--tiny th,
  .o-table--tiny td {
    padding: 6px;
  }
  
  .o-table--small th,
  .o-table--small td {
    padding: 12px;
  }
  
  .o-table--large th,
  .o-table--large td {
    padding: 48px;
  }
  
  .o-table--huge th,
  .o-table--huge td {
    padding: 96px;
  }
  
  /* ==========================================================================
     #PACK
     ========================================================================== */
  /**
   * The pack object simply causes any number of elements pack up horizontally to
   * automatically fill an equal, fluid width of their parent.
   *
   * 1. Fill all available space.
   * 2. Remove any leftover styling from lists.
   * 3. Cause children to be automatically equally sized.
   */
  .o-pack {
    width: 100%;
    /* [1] */
    margin-left: 0;
    /* [2] */
    display: table;
    table-layout: fixed;
    /* [3] */
  }
  
  /**
   * 1. Cause children to adopt table-like structure.
   * 2. Default item alignment is with the tops of each other.
   */
  .o-pack__item {
    display: table-cell;
    /* [1] */
    vertical-align: top;
    /* [2] */
    /* Vertical alignment variants.
       ====================================================================== */
  }
  .o-pack--middle > .o-pack__item {
    vertical-align: middle;
  }
  .o-pack--bottom > .o-pack__item {
    vertical-align: bottom;
  }
  
  /* Unequal-width items.
     ========================================================================== */
  .o-pack--auto {
    table-layout: auto;
  }
  
  /* Size variants.
     ========================================================================== */
  .o-pack--tiny {
    border-spacing: 6px;
  }
  
  .o-pack--small {
    border-spacing: 12px;
  }
  
  .o-pack--large {
    border-spacing: 48px;
  }
  
  .o-pack--huge {
    border-spacing: 96px;
  }
  
  /* Reversed order packs
     ========================================================================== */
  .o-pack--reverse {
    direction: rtl;
  }
  .o-pack--reverse > .o-pack__item {
    direction: ltr;
  }
  
  /* ==========================================================================
     #CLEARFIX
     ========================================================================== */
  /**
   * Attach our clearfix mixin to a utility class.
   */
  .u-clearfix:after {
    content: "" !important;
    display: block !important;
    clear: both !important;
  }
  
  /* ==========================================================================
     #WIDTHS
     ========================================================================== */
  /**
   * inuitcss generates a series of utility classes that give a fluid width to
   * whichever element they’re applied, e.g.:
   *
   *   <img src="" alt="" class="u-1/2" />
   *
   * These classes are most commonly used in conjunction with our layout system,
   * e.g.:
   *
   *   <div class="o-layout__item  u-1/2">
   *
   * By default, inuitcss will also generate responsive variants of each of these
   * classes by using your Sass MQ configuration, e.g.:
   *
   *   <div class="o-layout__item  u-1/1  u-1/2@tablet  u-1/3@desktop">
   *
   * Optionally, inuitcss can generate offset classes which can push and pull
   * elements left and right by a specified amount, e.g.:
   *
   *   <div class="o-layout__item  u-2/3  u-pull-1/3">
   *
   * This is useful for making very granular changes to the rendered order of
   * items in a layout.
   *
   * N.B. This option is turned off by default.
   */
  /**
   * A series of width helper classes that you can use to size things like grid
   * systems. Classes take a fraction-like format (e.g. `.u-2/3`). Use these in
   * your markup:
   *
   * <div class="u-7/12">
   *
   * The following will generate widths helper classes based on the fractions
   * defined in the `$inuit-fractions` list.
   */
  .u-1\/1 {
    width: 100% !important;
  }
  
  .u-1\/2 {
    width: 50% !important;
  }
  
  .u-2\/2 {
    width: 100% !important;
  }
  
  .u-1\/3 {
    width: 33.3333333333% !important;
  }
  
  .u-2\/3 {
    width: 66.6666666667% !important;
  }
  
  .u-3\/3 {
    width: 100% !important;
  }
  
  .u-1\/4 {
    width: 25% !important;
  }
  
  .u-2\/4 {
    width: 50% !important;
  }
  
  .u-3\/4 {
    width: 75% !important;
  }
  
  .u-4\/4 {
    width: 100% !important;
  }
  
  .u-1\/5 {
    width: 20% !important;
  }
  
  .u-2\/5 {
    width: 40% !important;
  }
  
  .u-3\/5 {
    width: 60% !important;
  }
  
  .u-4\/5 {
    width: 80% !important;
  }
  
  .u-5\/5 {
    width: 100% !important;
  }
  
  /**
   * If we’re using Sass-MQ, automatically generate grid system(s) for each of our
   * defined breakpoints, and give them a Responsive Suffix, e.g.:
   *
   * <div class="u-3/12@mobile">
   */
  @media (min-width: 20em) {
    .u-1\/1\@mobile {
      width: 100% !important;
    }
  
    .u-1\/2\@mobile {
      width: 50% !important;
    }
  
    .u-2\/2\@mobile {
      width: 100% !important;
    }
  
    .u-1\/3\@mobile {
      width: 33.3333333333% !important;
    }
  
    .u-2\/3\@mobile {
      width: 66.6666666667% !important;
    }
  
    .u-3\/3\@mobile {
      width: 100% !important;
    }
  
    .u-1\/4\@mobile {
      width: 25% !important;
    }
  
    .u-2\/4\@mobile {
      width: 50% !important;
    }
  
    .u-3\/4\@mobile {
      width: 75% !important;
    }
  
    .u-4\/4\@mobile {
      width: 100% !important;
    }
  
    .u-1\/5\@mobile {
      width: 20% !important;
    }
  
    .u-2\/5\@mobile {
      width: 40% !important;
    }
  
    .u-3\/5\@mobile {
      width: 60% !important;
    }
  
    .u-4\/5\@mobile {
      width: 80% !important;
    }
  
    .u-5\/5\@mobile {
      width: 100% !important;
    }
  }
  @media (min-width: 46.25em) {
    .u-1\/1\@tablet {
      width: 100% !important;
    }
  
    .u-1\/2\@tablet {
      width: 50% !important;
    }
  
    .u-2\/2\@tablet {
      width: 100% !important;
    }
  
    .u-1\/3\@tablet {
      width: 33.3333333333% !important;
    }
  
    .u-2\/3\@tablet {
      width: 66.6666666667% !important;
    }
  
    .u-3\/3\@tablet {
      width: 100% !important;
    }
  
    .u-1\/4\@tablet {
      width: 25% !important;
    }
  
    .u-2\/4\@tablet {
      width: 50% !important;
    }
  
    .u-3\/4\@tablet {
      width: 75% !important;
    }
  
    .u-4\/4\@tablet {
      width: 100% !important;
    }
  
    .u-1\/5\@tablet {
      width: 20% !important;
    }
  
    .u-2\/5\@tablet {
      width: 40% !important;
    }
  
    .u-3\/5\@tablet {
      width: 60% !important;
    }
  
    .u-4\/5\@tablet {
      width: 80% !important;
    }
  
    .u-5\/5\@tablet {
      width: 100% !important;
    }
  }
  @media (min-width: 61.25em) {
    .u-1\/1\@desktop {
      width: 100% !important;
    }
  
    .u-1\/2\@desktop {
      width: 50% !important;
    }
  
    .u-2\/2\@desktop {
      width: 100% !important;
    }
  
    .u-1\/3\@desktop {
      width: 33.3333333333% !important;
    }
  
    .u-2\/3\@desktop {
      width: 66.6666666667% !important;
    }
  
    .u-3\/3\@desktop {
      width: 100% !important;
    }
  
    .u-1\/4\@desktop {
      width: 25% !important;
    }
  
    .u-2\/4\@desktop {
      width: 50% !important;
    }
  
    .u-3\/4\@desktop {
      width: 75% !important;
    }
  
    .u-4\/4\@desktop {
      width: 100% !important;
    }
  
    .u-1\/5\@desktop {
      width: 20% !important;
    }
  
    .u-2\/5\@desktop {
      width: 40% !important;
    }
  
    .u-3\/5\@desktop {
      width: 60% !important;
    }
  
    .u-4\/5\@desktop {
      width: 80% !important;
    }
  
    .u-5\/5\@desktop {
      width: 100% !important;
    }
  }
  @media (min-width: 81.25em) {
    .u-1\/1\@wide {
      width: 100% !important;
    }
  
    .u-1\/2\@wide {
      width: 50% !important;
    }
  
    .u-2\/2\@wide {
      width: 100% !important;
    }
  
    .u-1\/3\@wide {
      width: 33.3333333333% !important;
    }
  
    .u-2\/3\@wide {
      width: 66.6666666667% !important;
    }
  
    .u-3\/3\@wide {
      width: 100% !important;
    }
  
    .u-1\/4\@wide {
      width: 25% !important;
    }
  
    .u-2\/4\@wide {
      width: 50% !important;
    }
  
    .u-3\/4\@wide {
      width: 75% !important;
    }
  
    .u-4\/4\@wide {
      width: 100% !important;
    }
  
    .u-1\/5\@wide {
      width: 20% !important;
    }
  
    .u-2\/5\@wide {
      width: 40% !important;
    }
  
    .u-3\/5\@wide {
      width: 60% !important;
    }
  
    .u-4\/5\@wide {
      width: 80% !important;
    }
  
    .u-5\/5\@wide {
      width: 100% !important;
    }
  }
  /* ==========================================================================
     #HEADINGS
     ========================================================================== */
  /**
   * Redefine all of our basic heading styles against utility classes so as to
   * allow for double stranded heading hierarchy, e.g. we semantically need an H2,
   * but we want it to be sized like an H1:
   *
   *   <h2 class="u-h1"></h2>
   *
   */
  .u-h1 {
    font-size: 36px !important;
    font-size: 2.25rem !important;
    line-height: 1.3333333333 !important;
  }
  
  .u-h2 {
    font-size: 28px !important;
    font-size: 1.75rem !important;
    line-height: 1.7142857143 !important;
  }
  
  .u-h3 {
    font-size: 24px !important;
    font-size: 1.5rem !important;
    line-height: 1 !important;
  }
  
  .u-h4 {
    font-size: 20px !important;
    font-size: 1.25rem !important;
    line-height: 1.2 !important;
  }
  
  .u-h5 {
    font-size: 18px !important;
    font-size: 1.125rem !important;
    line-height: 1.3333333333 !important;
  }
  
  .u-h6 {
    font-size: 16px !important;
    font-size: 1rem !important;
    line-height: 1.5 !important;
  }
  
  /* ==========================================================================
     #SPACING
     ========================================================================== */
  /**
   * Utility classes to put specific spacing values onto elements. The below loop
   * will generate us a suite of classes like:
   *
   *   .u-margin-top {}
   *   .u-padding-left-large {}
   *   .u-margin-right-small {}
   *   .u-padding {}
   *   .u-padding-right-none {}
   *   .u-padding-horizontal {}
   *   .u-padding-vertical-small {}
   */
  /* stylelint-disable string-quotes */
  .u-padding {
    padding: 24px !important;
  }
  
  .u-padding-tiny {
    padding: 6px !important;
  }
  
  .u-padding-small {
    padding: 12px !important;
  }
  
  .u-padding-large {
    padding: 48px !important;
  }
  
  .u-padding-huge {
    padding: 96px !important;
  }
  
  .u-padding-none {
    padding: 0 !important;
  }
  
  .u-padding-top {
    padding-top: 24px !important;
  }
  
  .u-padding-top-tiny {
    padding-top: 6px !important;
  }
  
  .u-padding-top-small {
    padding-top: 12px !important;
  }
  
  .u-padding-top-large {
    padding-top: 48px !important;
  }
  
  .u-padding-top-huge {
    padding-top: 96px !important;
  }
  
  .u-padding-top-none {
    padding-top: 0 !important;
  }
  
  .u-padding-right {
    padding-right: 24px !important;
  }
  
  .u-padding-right-tiny {
    padding-right: 6px !important;
  }
  
  .u-padding-right-small {
    padding-right: 12px !important;
  }
  
  .u-padding-right-large {
    padding-right: 48px !important;
  }
  
  .u-padding-right-huge {
    padding-right: 96px !important;
  }
  
  .u-padding-right-none {
    padding-right: 0 !important;
  }
  
  .u-padding-bottom {
    padding-bottom: 24px !important;
  }
  
  .u-padding-bottom-tiny {
    padding-bottom: 6px !important;
  }
  
  .u-padding-bottom-small {
    padding-bottom: 12px !important;
  }
  
  .u-padding-bottom-large {
    padding-bottom: 48px !important;
  }
  
  .u-padding-bottom-huge {
    padding-bottom: 96px !important;
  }
  
  .u-padding-bottom-none {
    padding-bottom: 0 !important;
  }
  
  .u-padding-left {
    padding-left: 24px !important;
  }
  
  .u-padding-left-tiny {
    padding-left: 6px !important;
  }
  
  .u-padding-left-small {
    padding-left: 12px !important;
  }
  
  .u-padding-left-large {
    padding-left: 48px !important;
  }
  
  .u-padding-left-huge {
    padding-left: 96px !important;
  }
  
  .u-padding-left-none {
    padding-left: 0 !important;
  }
  
  .u-padding-horizontal {
    padding-left: 24px !important;
    padding-right: 24px !important;
  }
  
  .u-padding-horizontal-tiny {
    padding-left: 6px !important;
    padding-right: 6px !important;
  }
  
  .u-padding-horizontal-small {
    padding-left: 12px !important;
    padding-right: 12px !important;
  }
  
  .u-padding-horizontal-large {
    padding-left: 48px !important;
    padding-right: 48px !important;
  }
  
  .u-padding-horizontal-huge {
    padding-left: 96px !important;
    padding-right: 96px !important;
  }
  
  .u-padding-horizontal-none {
    padding-left: 0 !important;
    padding-right: 0 !important;
  }
  
  .u-padding-vertical {
    padding-top: 24px !important;
    padding-bottom: 24px !important;
  }
  
  .u-padding-vertical-tiny {
    padding-top: 6px !important;
    padding-bottom: 6px !important;
  }
  
  .u-padding-vertical-small {
    padding-top: 12px !important;
    padding-bottom: 12px !important;
  }
  
  .u-padding-vertical-large {
    padding-top: 48px !important;
    padding-bottom: 48px !important;
  }
  
  .u-padding-vertical-huge {
    padding-top: 96px !important;
    padding-bottom: 96px !important;
  }
  
  .u-padding-vertical-none {
    padding-top: 0 !important;
    padding-bottom: 0 !important;
  }
  
  .u-margin {
    margin: 24px !important;
  }
  
  .u-margin-tiny {
    margin: 6px !important;
  }
  
  .u-margin-small {
    margin: 12px !important;
  }
  
  .u-margin-large {
    margin: 48px !important;
  }
  
  .u-margin-huge {
    margin: 96px !important;
  }
  
  .u-margin-none {
    margin: 0 !important;
  }
  
  .u-margin-top {
    margin-top: 24px !important;
  }
  
  .u-margin-top-tiny {
    margin-top: 6px !important;
  }
  
  .u-margin-top-small {
    margin-top: 12px !important;
  }
  
  .u-margin-top-large {
    margin-top: 48px !important;
  }
  
  .u-margin-top-huge {
    margin-top: 96px !important;
  }
  
  .u-margin-top-none {
    margin-top: 0 !important;
  }
  
  .u-margin-right {
    margin-right: 24px !important;
  }
  
  .u-margin-right-tiny {
    margin-right: 6px !important;
  }
  
  .u-margin-right-small {
    margin-right: 12px !important;
  }
  
  .u-margin-right-large {
    margin-right: 48px !important;
  }
  
  .u-margin-right-huge {
    margin-right: 96px !important;
  }
  
  .u-margin-right-none {
    margin-right: 0 !important;
  }
  
  .u-margin-bottom {
    margin-bottom: 24px !important;
  }
  
  .u-margin-bottom-tiny {
    margin-bottom: 6px !important;
  }
  
  .u-margin-bottom-small {
    margin-bottom: 12px !important;
  }
  
  .u-margin-bottom-large {
    margin-bottom: 48px !important;
  }
  
  .u-margin-bottom-huge {
    margin-bottom: 96px !important;
  }
  
  .u-margin-bottom-none {
    margin-bottom: 0 !important;
  }
  
  .u-margin-left {
    margin-left: 24px !important;
  }
  
  .u-margin-left-tiny {
    margin-left: 6px !important;
  }
  
  .u-margin-left-small {
    margin-left: 12px !important;
  }
  
  .u-margin-left-large {
    margin-left: 48px !important;
  }
  
  .u-margin-left-huge {
    margin-left: 96px !important;
  }
  
  .u-margin-left-none {
    margin-left: 0 !important;
  }
  
  .u-margin-horizontal {
    margin-left: 24px !important;
    margin-right: 24px !important;
  }
  
  .u-margin-horizontal-tiny {
    margin-left: 6px !important;
    margin-right: 6px !important;
  }
  
  .u-margin-horizontal-small {
    margin-left: 12px !important;
    margin-right: 12px !important;
  }
  
  .u-margin-horizontal-large {
    margin-left: 48px !important;
    margin-right: 48px !important;
  }
  
  .u-margin-horizontal-huge {
    margin-left: 96px !important;
    margin-right: 96px !important;
  }
  
  .u-margin-horizontal-none {
    margin-left: 0 !important;
    margin-right: 0 !important;
  }
  
  .u-margin-vertical {
    margin-top: 24px !important;
    margin-bottom: 24px !important;
  }
  
  .u-margin-vertical-tiny {
    margin-top: 6px !important;
    margin-bottom: 6px !important;
  }
  
  .u-margin-vertical-small {
    margin-top: 12px !important;
    margin-bottom: 12px !important;
  }
  
  .u-margin-vertical-large {
    margin-top: 48px !important;
    margin-bottom: 48px !important;
  }
  
  .u-margin-vertical-huge {
    margin-top: 96px !important;
    margin-bottom: 96px !important;
  }
  
  .u-margin-vertical-none {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
  }
  
  /* stylelint-enable string-quotes */
  /* ==========================================================================
     #PRINT
     ========================================================================== */
  /**
   * Very crude, reset-like styles taken from the HTML5 Boilerplate:
   * https://github.com/h5bp/html5-boilerplate/blob/5.3.0/dist/doc/css.md#print-styles
   * https://github.com/h5bp/html5-boilerplate/blob/master/dist/css/main.css#L205-L282
   */
  @media print {
    /**
     * 1. Black prints faster: http://www.sanbeiji.com/archives/953
     */
    *,
    *:before,
    *:after,
    *:first-letter,
    *:first-line {
      background: transparent !important;
      color: #000 !important;
      /* [1] */
      box-shadow: none !important;
      text-shadow: none !important;
    }
  
    a,
    a:visited {
      text-decoration: underline;
    }
  
    a[href]:after {
      content: " (" attr(href) ")";
    }
  
    abbr[title]:after {
      content: " (" attr(title) ")";
    }
  
    /**
     * Don't show links that are fragment identifiers, or use the `javascript:`
     * pseudo protocol.
     */
    a[href^="#"]:after,
    a[href^="javascript:"]:after {
      content: "";
    }
  
    pre,
    blockquote {
      border: 1px solid #999;
      page-break-inside: avoid;
    }
  
    /**
     * Printing Tables: http://css-discuss.incutio.com/wiki/Printing_Tables
     */
    thead {
      display: table-header-group;
    }
  
    tr,
    img {
      page-break-inside: avoid;
    }
  
    img {
      max-width: 100% !important;
    }
  
    p,
    h2,
    h3 {
      orphans: 3;
      widows: 3;
    }
  
    h2,
    h3 {
      page-break-after: avoid;
    }
  }
  /* ==========================================================================
     #HIDE
     ========================================================================== */
  /**
   * Hide only visually, but have it available for screen readers:
   * http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
   */
  .u-hidden-visually {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    clip-path: inset(50%) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    white-space: nowrap !important;
    width: 1px !important;
  }
  
  /**
   * Hide visually and from screen readers.
   */
  .u-hidden {
    display: none !important;
  }
  
  /* begin colors */
  /* end colors */
  /* icon defaults */
  .c-icon {
    height: 1em;
    margin-right: 6px;
    position: relative;
    top: -2px;
    vertical-align: middle;
  }
  
  /* alert */
  .c-icon-alert.c-icon--active .c-icon-alert__frame {
    stroke: #60c1da;
  }
  .c-icon-alert.c-icon--active .c-icon-alert__bang {
    fill: #60c1da;
  }
  .c-icon-alert.c-icon--inverse .c-icon-alert__frame {
    stroke: #fff;
  }
  .c-icon-alert.c-icon--inverse .c-icon-alert__bang {
    fill: #fff;
  }
  
  /* burger */
  .c-icon-burger.c-icon--active rect {
    fill: #60c1da;
  }
  .c-icon-burger.c-icon--inverse rect {
    fill: #fff;
  }
  
  /* chat bubble */
  .c-icon-chat-bubble.c-icon--active path {
    stroke: #60c1da;
  }
  .c-icon-chat-bubble.c-icon--inverse path {
    stroke: #fff;
  }
  
  /* clock */
  .c-icon-clock.c-icon--active g {
    fill: #60c1da;
  }
  .c-icon-clock.c-icon--inverse g {
    fill: #fff;
  }
  
  /* logo */
  .c-icon-logo.c-icon--active g {
    fill: #60c1da;
  }
  .c-icon-logo.c-icon--inverse g {
    fill: #fff;
  }
  
  /* password */
  .c-icon-password.c-icon--active path {
    stroke: #60c1da;
  }
  .c-icon-password.c-icon--inverse path {
    stroke: #fff;
  }
  
  /* location pin */
  .c-icon-pin.c-icon--active path {
    stroke: #60c1da;
  }
  .c-icon-pin.c-icon--inverse path {
    stroke: #fff;
  }
  
  /* birthday */
  .c-icon-birthday.c-icon--active g {
    stroke: #60c1da;
  }
  .c-icon-birthday.c-icon--inverse g {
    stroke: #fff;
  }
  
  /* calendar */
  .c-icon-calendar.c-icon--active g {
    fill: #60c1da;
  }
  .c-icon-calendar.c-icon--inverse g {
    fill: #fff;
  }
  
  /* close */
  .c-icon-close.c-icon--active path {
    fill: #60c1da;
  }
  .c-icon-close.c-icon--inverse path {
    fill: #fff;
  }
  
  /* email */
  .c-icon-email.c-icon--active path {
    stroke: #60c1da;
  }
  .c-icon-email.c-icon--inverse path {
    stroke: #fff;
  }
  
  html {
    color: #4a4a4a;
    font-family: 'Fira Sans Condensed', sans-serif;
    font-size: 14px;
  }
  @media (min-width: 46.25em) {
    html {
      font-size: 16px;
    }
  }
  
  body {
    margin-top: 24px;
    margin-bottom: 24px;
  }
  
  .c-form-field {
    margin-bottom: 24px;
  }
  
  .c-form-field--error .c-form-field__control {
    border-bottom: solid 1px #e0e0e0;
  }
  .c-form-field--error .c-form-field__hint {
    color: #d9534f;
  }
  
  .c-form-field__hint {
    font-size: 0.75rem;
    color: #9b9b9b;
    font-weight: 300;
    min-height: 24px;
  }
  
  .c-form-field__img {
    height: 1.375rem;
    margin-right: 0;
    text-align: center;
    width: 2.125rem;
  }
  .c-form-field__img > img {
    margin: 0 auto;
    height: 1.375rem;
  }
  
  .c-form-field__control {
    border-bottom: solid 1px #e0e0e0;
  }
  
  .c-form-field__input {
    -webkit-backface-visibility: hidden;
    border: none;
    color: #4a4a4a;
    font-family: inherit;
    font-weight: 300;
    padding: 0;
    width: 100%;
  }
  
  .c-form-button {
    border: solid 1px #fff;
    border-radius: 4px;
    color: #fff;
    cursor: pointer;
    display: inline-block;
    font: inherit;
    font-weight: 600;
    margin: 12px 0;
    padding: 6px 24px;
    text-align: center;
    vertical-align: middle;
    text-decoration: none;
    font-weight: normal;
  }
  
  .c-form-button--primary {
    background-color: #337ab7;
    border-color: #337ab7;
  }
  .c-form-button--primary.c-form-button--disabled, .c-form-button--primary:disabled {
    background-color: #5094ce;
    border-color: #5094ce;
  }
  .c-form-button--primary.c-form-button--inverse {
    background-color: #fff;
    color: #337ab7;
    border-color: #337ab7;
  }
  
  .c-form-button--block {
    width: 100%;
  }
  
  .c-form-button--destructive {
    background-color: #d9534f;
    border-color: #d9534f;
  }
  
  .c-form-radio__label {
    border-radius: 4px;
    border: solid 1px #e0e0e0;
    color: #9b9b9b;
    cursor: pointer;
    display: block;
    margin: 0 auto;
    overflow-x: hidden;
    padding: 6px;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: 100%;
  }
  
  .c-form-radio__item {
    margin-bottom: 6px;
    text-align: center;
  }
  
  .c-form-radio__field:checked + label {
    border-color: #337ab7;
    color: #337ab7;
  }
  
  .c-form-radio--error .c-form-radio__hint {
    color: #d9534f;
  }
  
  .c-form-radio__hint {
    color: #9b9b9b;
    font-size: 0.75rem;
    min-height: 2rem;
  }
  
  .u-red {
    color: #e90c27;
  }
  
  .c-h1 {
    font-size: 2rem;
  }
  
  .c-h2 {
    font-size: 1.5rem;
    font-weight: 600;
  }
  
  .c-h3 {
    font-size: 1.25rem;
  }
  
  .c-h4 {
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
  }
  
  .c-h5 {
    font-size: 0.9375rem;
    font-weight: 600;
  }
  
  .c-text-strong {
    color: #0698bd;
  }
  
  .c-text-strong--inverse {
    color: #fff;
  }
  
  .c-text-strong--stronger {
    font-weight: 600;
    color: #4a4a4a;
  }
  
  .c-text-strong--super-strong {
    font-weight: 600;
    font-size: 1.25rem;
  }
  
  .c-text-small {
    font-size: 0.875rem;
  }
  
  .c-text-small--muted {
    color: #9b9b9b;
  }
  
  .c-text-small--strong {
    color: #0698bd;
  }
  
  .c-text-small--stronger {
    font-weight: 600;
  }
  
  .c-form-progress__item {
    margin-right: 16px;
    color: #9b9b9b;
  }
  
  .c-form-progress__item--complete {
    color: #4ab043;
  }
  
  .c-form-progress__item--active {
    color: #4a4a4a;
    font-weight: 600;
  }
  
script(src='https://static.codepen.io/assets/editor/iframe/iframeConsoleRunner-7f4d47902dc785f30dedcac9c996b9f31d4dfcc33567cc48f0431bc918c2bf05.js')
script(src='https://static.codepen.io/assets/editor/iframe/iframeRefreshCSS-e03f509ba0a671350b4b363ff105b2eb009850f34a2b4deaadaa63ed5d970b37.js')
script(src='https://static.codepen.io/assets/editor/iframe/iframeRuntimeErrors-29f059e28a3c6d3878960591ef98b1e303c1fe1935197dae7797c017a3ca1e82.js')
#js-app
script(src='https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/6.20.0/polyfill.js')
script(src='https://unpkg.com/react@16/umd/react.development.js')
script(src='https://unpkg.com/react-dom@16/umd/react-dom.development.js')
script(src='https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.6.2/prop-types.js')
script(src='https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.0/redux.js')
script(src='https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.js')
script(src='https://cdnjs.cloudflare.com/ajax/libs/redux-form/7.4.2/redux-form.js')
script(src='https://cdnjs.cloudflare.com/ajax/libs/classnames/2.2.5/dedupe.js')
script(src='https://cdnjs.cloudflare.com/ajax/libs/react-router/3.2.1/ReactRouter.js')
script(src='https://cdnjs.cloudflare.com/ajax/libs/react-router-redux/4.0.8/ReactRouterRedux.js')
script(src='https://cdnjs.cloudflare.com/ajax/libs/redux-saga/0.16.0/redux-saga.js')
script(src='https://cdnjs.cloudflare.com/ajax/libs/react-dropzone/5.1.0/index.js')
script(src='https://codepen.io/clindsey/pen/LbyNre.js')
//  svg-icon-1.0.0 
script.
  
  const professionsConfig = ({
    alpha: {
      label: 'Alpha',
      value: 'alpha',
      specializations: {
        alpha: {
          label: 'Alpha',
          value: 'alpha',
          roles: {
            alpha: {
              label: 'Alpha',
              value: 'alpha',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            bravo: {
              label: 'Bravo',
              value: 'bravo',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            charlie: {
              label: 'Charlie',
              value: 'charlie',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            }
          }
        },
        bravo: {
          label: 'Bravo',
          value: 'bravo',
          roles: {
            alpha: {
              label: 'Alpha',
              value: 'alpha',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            bravo: {
              label: 'Bravo',
              value: 'bravo',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            charlie: {
              label: 'Charlie',
              value: 'charlie',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            }
          }
        },
        charlie: {
          label: 'Charlie',
          value: 'charlie',
          roles: {
            alpha: {
              label: 'Alpha',
              value: 'alpha',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            bravo: {
              label: 'Bravo',
              value: 'bravo',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            charlie: {
              label: 'Charlie',
              value: 'charlie',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            }
          }
        }
      }
    },
    bravo: {
      label: 'Bravo',
      value: 'bravo',
      specializations: {
        alpha: {
          label: 'Alpha',
          value: 'alpha',
          roles: {
            alpha: {
              label: 'Alpha',
              value: 'alpha',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            bravo: {
              label: 'Bravo',
              value: 'bravo',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            charlie: {
              label: 'Charlie',
              value: 'charlie',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            }
          }
        },
        bravo: {
          label: 'Bravo',
          value: 'bravo',
          roles: {
            alpha: {
              label: 'Alpha',
              value: 'alpha',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            bravo: {
              label: 'Bravo',
              value: 'bravo',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            charlie: {
              label: 'Charlie',
              value: 'charlie',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            }
          }
        },
        charlie: {
          label: 'Charlie',
          value: 'charlie',
          roles: {
            alpha: {
              label: 'Alpha',
              value: 'alpha',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            bravo: {
              label: 'Bravo',
              value: 'bravo',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            charlie: {
              label: 'Charlie',
              value: 'charlie',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            }
          }
        }
      }
    },
    charlie: {
      label: 'Charlie',
      value: 'charlie',
      specializations: {
        alpha: {
          label: 'Alpha',
          value: 'alpha',
          roles: {
            alpha: {
              label: 'Alpha',
              value: 'alpha',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            bravo: {
              label: 'Bravo',
              value: 'bravo',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            charlie: {
              label: 'Charlie',
              value: 'charlie',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            }
          }
        },
        bravo: {
          label: 'Bravo',
          value: 'bravo',
          roles: {
            alpha: {
              label: 'Alpha',
              value: 'alpha',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            bravo: {
              label: 'Bravo',
              value: 'bravo',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            charlie: {
              label: 'Charlie',
              value: 'charlie',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            }
          }
        },
        charlie: {
          label: 'Charlie',
          value: 'charlie',
          roles: {
            alpha: {
              label: 'Alpha',
              value: 'alpha',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            bravo: {
              label: 'Bravo',
              value: 'bravo',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            },
            charlie: {
              label: 'Charlie',
              value: 'charlie',
              concentrations: {
                alpha: {
                  label: 'Alpha',
                  value: 'alpha'
                },
                bravo: {
                  label: 'Bravo',
                  value: 'bravo'
                },
                charlie: {
                  label: 'Charlie',
                  value: 'charlie'
                }
              }
            }
          }
        }
      }
    }
  })
  
script(src='https://static.codepen.io/assets/common/stopExecutionOnTimeout-157cd5b220a5c80d4ff8e0e70ac069bffd87a61252088146915e8726e5d9f147.js')
script#INLINE_PEN_JS_ID.
  
  var _class, _temp, _class2, _temp2, _class3, _temp3, _class4, _temp4, _class5, _temp5, _class6, _temp6, _class7, _temp7, _class8, _temp8, _class9, _temp9, _class10, _temp10, _class11, _temp11;function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {if (window.CP.shouldStopExecution(1)) break;var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}window.CP.exitedLoop(1);return target;};return _extends.apply(this, arguments);}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;} /*
rd PARTY LIBRARY IMPORTS - all the external libraries being used
route on-enter callbacks, useful for running code before a page loads
routing config that glues url routes to pages
configures the store with reducers, adds middlewares, etc.
these are the page names, used for navigating routes
typical redux reducers, keeps track of data multiple components will use
simple strings that are used as action event keys in reducers, actions and sagas
a place for side-effects to happen, very good for testing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GENERIC STORE-CONNECTED COMPONENTS - react components that are connected to the store
these combine form submissions with action calls, providing extra info that the form shouldn't know
simple object creators that are used by the reducers and sagas
these are connected to routes, 1-to-1 pairing
helper functions to deal with routing
helpers functions to deal with forms
these simple functions check form values to report missing value errors
redux-form-connected components that simply assemble fields the form will use
simple components that wrap generic controls and make them specific to the form that uses them
generic user input controls, they are adapted to forms by being wrapped in fields
functions to extract data from the stores, keeps components decoupled from the store's implementation

  
  // BEGIN 3rd PARTY LIBRARY IMPORTS
  const {
    select,
    call,
    takeEvery } =
  ReduxSaga.effects;
  const {
    Provider,
    connect } =
  ReactRedux;
  const {
    routerMiddleware,
    routerReducer,
    syncHistoryWithStore } =
  ReactRouterRedux;
  const {
    Field,
    FieldArray,
    Fields,
    FormSection,
    reduxForm } =
  ReduxForm;
  const {
    IndexRedirect,
    Link,
    Route,
    Router,
    hashHistory } =
  ReactRouter;
  const sagaMiddleware = ReduxSaga.default();
  const DropzoneComponent = Dropzone;
  // END 3rd PARTY LIBRARY IMPORTS
  
  // BEGIN HOOKS
  const updateParamsHook = store => (nextState, replace, next) => {
    store.dispatch(updateParamsAction(nextState.params));
    next();
  };
  
  const ensureContactDetails = store => (nextState, replace, next) => {
    if (getIsContactDetailsComplete(store.getState()) === false) {
      replace(`/${CONTACT_PAGE}`);
    }
    next();
  };
  // END HOOKS
  
  // BEGIN ROUTES
  setTimeout(() => {
    const store = configureStore();
    const history = syncHistoryWithStore(hashHistory, store);
    ReactDOM.render(
    React.createElement(Provider, { store },
    React.createElement(Router, { history },
    React.createElement(Route, {
      component: AppContainer,
      path: "/" },
    React.createElement(Route, {
      path: CONTACT_PAGE,
      component: ContactPage,
      wizardProgress: "0" }),
  
    React.createElement(Route, {
      path: PROFESSION_PAGE,
      onEnter: composeEnterHooksSeries(ensureContactDetails(store)),
      component: ProfessionPage,
      wizardProgress: "1" }),
  
    React.createElement(Route, {
      path: `:profession/${SPECIALIZATION_PAGE}`,
      onEnter: composeEnterHooksSeries(ensureContactDetails(store), updateParamsHook(store)),
      component: SpecializationPage,
      wizardProgress: "2" }),
  
    React.createElement(Route, {
      path: `:profession/:specialization/${ROLE_PAGE}`,
      onEnter: composeEnterHooksSeries(ensureContactDetails(store), updateParamsHook(store)),
      component: RolePage,
      wizardProgress: "3" }),
  
    React.createElement(Route, {
      path: `:profession/:specialization/:role/${CONCENTRATION_PAGE}`,
      onEnter: composeEnterHooksSeries(ensureContactDetails(store), updateParamsHook(store)),
      component: ConcentrationPage,
      wizardProgress: "4" }),
  
    React.createElement(Route, {
      path: `:profession/:specialization/:role/:concentration/${FILE_UPLOAD_PAGE}`,
      onEnter: composeEnterHooksSeries(ensureContactDetails(store), updateParamsHook(store)),
      component: FileUploadPage,
      wizardProgress: "5" }),
  
    React.createElement(Route, {
      path: SUCCESS_PAGE,
      component: SuccessPage,
      wizardProgress: "6" }),
  
    React.createElement(IndexRedirect, { to: LANDING_PAGE })))),
  
  
  
    document.getElementById('js-app'));
  }, 0);
  // END ROUTES
  
  // BEGIN REDUX CONFIG
  function configureStore(initialState) {
    const reducers = Redux.combineReducers({
      ui: uiReducer,
      jobApplications: jobApplicationsReducer,
      form: ReduxForm.reducer,
      routing: routerReducer });
  
    const router = routerMiddleware(hashHistory);
    const store = Redux.createStore(
    reducers,
    initialState,
    Redux.applyMiddleware(router, sagaMiddleware));
  
    sagaMiddleware.run(rootSaga);
    return store;
  }
  // END REDUX CONFIG
  
  // BEGIN NAVIGATION CONSTANTS
  const CONTACT_PAGE = 'contact';
  const PROFESSION_PAGE = 'profession';
  const SPECIALIZATION_PAGE = 'specialization';
  const ROLE_PAGE = 'role';
  const CONCENTRATION_PAGE = 'concentration';
  const FILE_UPLOAD_PAGE = 'file-upload';
  const SUCCESS_PAGE = 'success';
  const LANDING_PAGE = CONTACT_PAGE;
  // END NAVIGATION CONSTANTS
  
  // BEGIN REDUCERS
  const getUiDefaultState = () => ({
    params: {} });
  
  
  const uiReducer = (state = getUiDefaultState(), action) => {
    if (action.type === UPDATE_PARAMS) {
      return {
        ...state,
        params: {
          ...state.params,
          ...action.params } };
  
  
    }
    return state;
  };
  
  const getContactDetailsDefaultState = () => ({
    username: null });
  
  
  const jobApplicationsReducer = (state = getContactDetailsDefaultState(), action) => {
    if (action.type === SUBMIT_CONTACT_DETAILS) {
      return {
        ...state,
        username: action.username };
  
    }
    return state;
  };
  // END REDUCERS
  
  // BEGIN CONSTANTS
  const UPDATE_PARAMS = 'ui/updateParams';
  const SUBMIT_CONTACT_DETAILS = 'jobApplication/contactDetails/submit';
  const SUBMIT_PROFESSION = 'jobApplication/profession/submit';
  const SUBMIT_SPECIALIZATION = 'jobApplication/specialization/submit';
  const SUBMIT_ROLE = 'jobApplication/role/submit';
  const SUBMIT_CONCENTRATION = 'jobApplication/concentration/submit';
  const SUBMIT_FILE_UPLOAD = 'jobApplication/fileUpload/submit';
  // END CONSTANTS
  
  // BEGIN SAGAS
  function* rootSaga() {
    yield ReduxSaga.effects.all([
    contactDetailsSubmitSaga(),
    professionSubmitSaga(),
    specializationSubmitSaga(),
    roleSubmitSaga(),
    concentrationSubmitSaga(),
    fileUploadSubmitSaga()]);
  
  }
  
  function* fileUploadSubmitSaga() {
    yield takeEvery(SUBMIT_FILE_UPLOAD, fileUploadSubmitEffect);
  }
  
  function* fileUploadSubmitEffect(action) {
    yield call(action.form.resolve);
    const username = yield select(getUsername);
    const profession = yield select(getParamsProfession);
    const specialization = yield select(getParamsSpecialization);
    const role = yield select(getParamsRole);
    const concentration = yield select(getParamsConcentration);
    const files = action.files;
    yield call(console.log, 'successful job app submit!', {
      username,
      profession,
      specialization,
      role,
      concentration,
      files });
  
    yield call(hashHistory.push, `/${SUCCESS_PAGE}`);
  }
  
  function* concentrationSubmitSaga() {
    yield takeEvery(SUBMIT_CONCENTRATION, concentrationSubmitEffect);
  }
  
  function* concentrationSubmitEffect(action) {
    yield call(action.form.resolve);
    const profession = yield select(getParamsProfession);
    const specialization = yield select(getParamsSpecialization);
    const role = yield select(getParamsRole);
    yield call(hashHistory.push, `/${profession}/${specialization}/${role}/${action.concentration}/${FILE_UPLOAD_PAGE}`);
  }
  
  function* roleSubmitSaga() {
    yield takeEvery(SUBMIT_ROLE, roleSubmitEffect);
  }
  
  function* roleSubmitEffect(action) {
    yield call(action.form.resolve);
    const profession = yield select(getParamsProfession);
    const specialization = yield select(getParamsSpecialization);
    yield call(hashHistory.push, `/${profession}/${specialization}/${action.role}/${CONCENTRATION_PAGE}`);
  }
  
  function* specializationSubmitSaga() {
    yield takeEvery(SUBMIT_SPECIALIZATION, specializationSubmitEffect);
  }
  
  function* specializationSubmitEffect(action) {
    yield call(action.form.resolve);
    const profession = yield select(getParamsProfession);
    yield call(hashHistory.push, `/${profession}/${action.specialization}/${ROLE_PAGE}`);
  }
  
  function* professionSubmitSaga() {
    yield takeEvery(SUBMIT_PROFESSION, professionSubmitEffect);
  }
  
  function* professionSubmitEffect(action) {
    yield call(action.form.resolve);
    yield call(hashHistory.push, `/${action.profession}/${SPECIALIZATION_PAGE}`);
  }
  
  function* contactDetailsSubmitSaga() {
    yield takeEvery(SUBMIT_CONTACT_DETAILS, contactDetailsSubmitEffect);
  }
  
  function* contactDetailsSubmitEffect(action) {
    yield call(action.form.resolve);
    yield call(hashHistory.push, `/${PROFESSION_PAGE}`);
  }
  // END SAGAS
  
  // BEGIN GENERIC STORE-CONNECTED COMPONENTS
  const AppContainer = connect((state, ownProps) => ({
    pages: getProgressPages(state, ownProps) }),
  {})(
  class extends React.Component {
    render() {
      return (
        React.createElement("div", { className: "o-wrapper" },
        React.createElement("div", { className: "o-layout" },
        React.createElement("div", { className: "o-layout__item" },
        React.createElement("ul", { className: "o-list-bare o-list-inline c-form-progress" },
        this.props.pages.map((page, index) =>
        React.createElement("li", {
          key: index,
          className: classNames({
            'o-list-inline__item': true,
            'c-form-progress__item': true,
            'c-form-progress__item--complete': page.complete,
            'c-form-progress__item--active': page.active }) },
  
        page.label))))),
  
  
  
  
        React.createElement("div", { className: "o-layout" },
        React.createElement("div", { className: "o-layout__item" },
        this.props.children))));
  
  
  
  
    }});
  
  // END GENERIC STORE-CONNECTED COMPONENTS
  
  // BEGIN FORM SUBMISSIONS
  const fileUploadSubmission = callbackAction => {
    return values => {
      const {
        fileUpload } =
      values;
      return new Promise((resolve, reject) => {
        callbackAction(fileUpload.files, resolve, reject);
      });
    };
  };
  
  const contactDetailsSubmission = callbackAction => {
    return ({ contact }) => {
      return new Promise((resolve, reject) => {
        callbackAction(contact.username, resolve, reject);
      });
    };
  };
  
  const professionSubmission = callbackAction => {
    return ({ profession }) => {
      return new Promise((resolve, reject) => {
        callbackAction(profession.title, resolve, reject);
      });
    };
  };
  
  const specializationSubmission = callbackAction => {
    return ({ specialization }) => {
      return new Promise((resolve, reject) => {
        callbackAction(specialization.title, resolve, reject);
      });
    };
  };
  
  const roleSubmission = callbackAction => {
    return ({ role }) => {
      return new Promise((resolve, reject) => {
        callbackAction(role.title, resolve, reject);
      });
    };
  };
  
  const concentrationSubmission = callbackAction => {
    return ({ concentration }) => {
      return new Promise((resolve, reject) => {
        callbackAction(concentration.title, resolve, reject);
      });
    };
  };
  // END FORM SUBMISSIONS
  
  // BEGIN ACTIONS
  const updateParamsAction = params => ({
    type: UPDATE_PARAMS,
    params });
  
  
  const submitContactDetailsAction = (username, resolve, reject) => ({
    type: SUBMIT_CONTACT_DETAILS,
    username,
    form: {
      resolve,
      reject } });
  
  
  
  const submitProfessionAction = (profession, resolve, reject) => ({
    type: SUBMIT_PROFESSION,
    profession,
    form: {
      resolve,
      reject } });
  
  
  
  const submitSpecializationAction = (specialization, resolve, reject) => ({
    type: SUBMIT_SPECIALIZATION,
    specialization,
    form: {
      resolve,
      reject } });
  
  
  
  const submitRoleAction = (role, resolve, reject) => ({
    type: SUBMIT_ROLE,
    role,
    form: {
      resolve,
      reject } });
  
  
  
  const submitFileUploadAction = (files, resolve, reject) => ({
    type: SUBMIT_FILE_UPLOAD,
    files,
    form: {
      resolve,
      reject } });
  
  
  
  const submitConcentrationAction = (concentration, resolve, reject) => ({
    type: SUBMIT_CONCENTRATION,
    concentration,
    form: {
      resolve,
      reject } });
  
  
  // END ACTIONS
  
  // BEGIN PAGES, ROUTE-SPECIFIC STORE-CONNECTED COMPONENTS
  const ContactPage = connect(() => ({}),
  {
    submitContactDetails: submitContactDetailsAction })((_temp = _class =
  class extends React.Component {
  
  
  
  
    render() {
      return (
        React.createElement("div", { className: "o-layout" },
        React.createElement("div", { className: "o-layout__item u-1/2@tablet" },
        React.createElement("h1", null, 'Contact Details'),
        React.createElement("p", null, 'Please provide your contact details.'),
        React.createElement(ContactDetailsForm, { onSubmit: contactDetailsSubmission(this.props.submitContactDetails) }))));
  
  
  
    }}, _defineProperty(_class, "propTypes", { submitContactDetails: PropTypes.func.isRequired }), _temp));
  
  
  const ProfessionPage = connect((state, ownProps) => ({
    professionOptions: getProfessionOptions(state, ownProps) }),
  {
    submitProfession: submitProfessionAction })((_temp2 = _class2 =
  class extends React.Component {
  
  
  
  
    render() {
      return (
        React.createElement("div", { className: "o-layout" },
        React.createElement("div", { className: "o-layout__item u-1/2@tablet" },
        React.createElement("h1", null, 'Profession Page'),
        React.createElement("p", null, 'Pick your profession'),
        React.createElement(ProfessionForm, {
          onSubmit: professionSubmission(this.props.submitProfession),
          professionOptions: this.props.professionOptions }))));
  
  
  
  
    }}, _defineProperty(_class2, "propTypes", { submitProfession: PropTypes.func.isRequired }), _temp2));
  
  
  const SpecializationPage = connect((state, ownProps) => ({
    specializationOptions: getSpecializationOptions(state, ownProps) }),
  {
    submitSpecialization: submitSpecializationAction })((_temp3 = _class3 =
  class extends React.Component {
  
  
  
  
  
  
  
  
    render() {
      return (
        React.createElement("div", { className: "o-layout" },
        React.createElement("div", { className: "o-layout__item u-1/2@tablet" },
        React.createElement("h1", null, 'Specialization Page'),
        React.createElement("p", null, 'Choose a specialization'),
        React.createElement(SpecializationForm, {
          specializationOptions: this.props.specializationOptions,
          onSubmit: specializationSubmission(this.props.submitSpecialization) }))));
  
  
  
  
    }}, _defineProperty(_class3, "propTypes", { submitSpecialization: PropTypes.func.isRequired, specializationOptions: PropTypes.arrayOf(PropTypes.shape({ label: PropTypes.string.isRequired, value: PropTypes.string.isRequired })).isRequired }), _temp3));
  
  
  const RolePage = connect((state, ownProps) => ({
    roleOptions: getRoleOptions(state, ownProps) }),
  {
    submitRole: submitRoleAction })((_temp4 = _class4 =
  class extends React.Component {
  
  
  
  
  
  
  
  
    render() {
      return (
        React.createElement("div", { className: "o-layout" },
        React.createElement("div", { className: "o-layout__item u-1/2@tablet" },
        React.createElement("h1", null, 'Role Page'),
        React.createElement("p", null, 'What role would you like?'),
        React.createElement(RoleForm, {
          roleOptions: this.props.roleOptions,
          onSubmit: roleSubmission(this.props.submitRole) }))));
  
  
  
  
    }}, _defineProperty(_class4, "propTypes", { submitRole: PropTypes.func.isRequired, roleOptions: PropTypes.arrayOf(PropTypes.shape({ label: PropTypes.string.isRequired, value: PropTypes.string.isRequired })).isRequired }), _temp4));
  
  
  const ConcentrationPage = connect((state, ownProps) => ({
    concentrationOptions: getConcentrationOptions(state, ownProps) }),
  {
    submitConcentration: submitConcentrationAction })((_temp5 = _class5 =
  class extends React.Component {
  
  
  
  
  
  
  
  
    render() {
      return (
        React.createElement("div", { className: "o-layout" },
        React.createElement("div", { className: "o-layout__item u-1/2@tablet" },
        React.createElement("h1", null, 'Concentration Page'),
        React.createElement("p", null, 'How about a specific concentration?'),
        React.createElement(ConcentrationForm, {
          concentrationOptions: this.props.concentrationOptions,
          onSubmit: concentrationSubmission(this.props.submitConcentration) }))));
  
  
  
  
    }}, _defineProperty(_class5, "propTypes", { submitConcentration: PropTypes.func.isRequired, concentrationOptions: PropTypes.arrayOf(PropTypes.shape({ label: PropTypes.string.isRequired, value: PropTypes.string.isRequired })).isRequired }), _temp5));
  
  
  const FileUploadPage = connect((state, ownProps) => ({}),
  {
    submitFileUpload: submitFileUploadAction })((_temp6 = _class6 =
  class extends React.Component {
  
  
  
  
    render() {
      return (
        React.createElement("div", { className: "o-layout" },
        React.createElement("div", { className: "o-layout__item u-1/2@tablet" },
        React.createElement("h1", null, 'File Upload Page'),
        React.createElement("p", null, 'Attach some files for this application.'),
        React.createElement(FileUploadForm, { onSubmit: fileUploadSubmission(this.props.submitFileUpload) }))));
  
  
  
    }}, _defineProperty(_class6, "propTypes", { submitFileUpload: PropTypes.func.isRequired }), _temp6));
  
  
  const SuccessPage = connect(() => ({}),
  {})(
  class extends React.Component {
    render() {
      return (
        React.createElement("div", { className: "o-layout" },
        React.createElement("div", { className: "o-layout__item u-1/2@tablet" },
        React.createElement("h1", null, 'Success Page'),
        React.createElement("p", null, 'You successfully completed the form!'))));
  
  
  
    }});
  
  // END PAGES, ROUTE-SPECIFIC STORE-CONNECTED COMPONENTS
  
  // BEGIN UTILS/ROUTES
  const composeEnterHooksSeries = (...hooks) => {
    return (nextState, originalReplace, executeTransition) => {
      let cancelSeries = false;
      const replace = location => {
        cancelSeries = true;
        originalReplace(location);
      };
      (function executeHooksSynchronously(remainingHooks) {
        if (cancelSeries || !remainingHooks.length) {
          return executeTransition();
        }
        let nextHook = remainingHooks[0];
        if (nextHook.length >= 3) {
          nextHook.call(this, nextState, replace, () => {
            executeHooksSynchronously(remainingHooks.slice(1));
          });
        } else {
          nextHook.call(this, nextState, replace);
          executeHooksSynchronously(remainingHooks.slice(1));
        }
      })(hooks);
    };
  };
  // END UTILS/ROUTES
  
  // BEGIN UTILS/FORMS
  const validateFields = (validators, requiredFields = {}) => values => {
    const validationErrors = Object.keys(validators).map(name => ({
      name,
      error: validators[name](values[name]) })).
    reduce((p, { name, error }) =>
    Object.keys(name).length ? { ...p, [name]: error } : p,
    {});
    Object.keys(requiredFields).forEach(fieldName => {
      Object.assign(validationErrors[fieldName], requiredFields[fieldName](values[fieldName]));
    });
    return validationErrors;
  };
  // END UTILS/FORMS
  
  // BEGIN FORM VALIDATIONS
  const usernameValidation = values => {
    const errors = {};
    if (!values || !values.username) {
      errors.username = 'Required';
    }
    return errors;
  };
  
  const titleValidation = values => {
    const errors = {};
    if (!values || !values.title) {
      errors.title = 'Required';
    }
    return errors;
  };
  
  const contactValidation = values => ({
    ...usernameValidation(values) });
  
  
  const professionValidation = values => ({
    ...titleValidation(values) });
  
  
  const specializationValidation = values => ({
    ...titleValidation(values) });
  
  
  const roleValidation = values => ({
    ...titleValidation(values) });
  
  
  const concentrationValidation = values => ({
    ...titleValidation(values) });
  
  
  const filesValidation = values => {
    const errors = {};
    if (!values || !values.files) {
      errors.files = {
        _error: 'Required' };
  
    }
    return errors;
  };
  
  const fileUploadValidation = values => ({
    ...filesValidation(values) });
  
  // END FORM VALIDATIONS
  
  // BEGIN FORMS
  const ContactDetailsForm = reduxForm({
    form: 'contentDetails',
    validate: validateFields({
      contact: contactValidation }) })(
  
  class extends React.Component {
    render() {
      return (
        React.createElement("form", { onSubmit: this.props.handleSubmit },
        React.createElement(FormSection, { name: "contact" },
        React.createElement(UsernameField, null)),
  
        React.createElement(SubmitButton, { disabled: this.props.submitting })));
  
  
    }});
  
  
  const ProfessionForm = reduxForm({
    form: 'profession',
    validate: validateFields({
      profession: professionValidation }) })((_temp7 = _class7 =
  
  class extends React.Component {
  
  
  
  
  
  
  
    render() {
      return (
        React.createElement("form", { onSubmit: this.props.handleSubmit },
        React.createElement(FormSection, { name: "profession" },
        React.createElement(ProfessionTitleField, { options: this.props.professionOptions })),
  
        React.createElement(SubmitButton, { disabled: this.props.submitting })));
  
  
    }}, _defineProperty(_class7, "propTypes", { professionOptions: PropTypes.arrayOf(PropTypes.shape({ label: PropTypes.string.isRequired, value: PropTypes.string.isRequired })).isRequired }), _temp7));
  
  
  const SpecializationForm = reduxForm({
    form: 'specialization',
    validate: validateFields({
      specialization: specializationValidation }) })((_temp8 = _class8 =
  
  class extends React.Component {
  
  
  
  
  
  
  
    render() {
      return (
        React.createElement("form", { onSubmit: this.props.handleSubmit },
        React.createElement(FormSection, { name: "specialization" },
        React.createElement(SpecializationTitleField, { options: this.props.specializationOptions })),
  
        React.createElement(SubmitButton, { disabled: this.props.submitting })));
  
  
    }}, _defineProperty(_class8, "propTypes", { specializationOptions: PropTypes.arrayOf(PropTypes.shape({ label: PropTypes.string.isRequired, value: PropTypes.string.isRequired })).isRequired }), _temp8));
  
  
  const RoleForm = reduxForm({
    form: 'role',
    validate: validateFields({
      role: roleValidation }) })((_temp9 = _class9 =
  
  class extends React.Component {
  
  
  
  
  
  
  
    render() {
      return (
        React.createElement("form", { onSubmit: this.props.handleSubmit },
        React.createElement(FormSection, { name: "role" },
        React.createElement(RoleTitleField, { options: this.props.roleOptions })),
  
        React.createElement(SubmitButton, { disabled: this.props.submitting })));
  
  
    }}, _defineProperty(_class9, "propTypes", { roleOptions: PropTypes.arrayOf(PropTypes.shape({ label: PropTypes.string.isRequired, value: PropTypes.string.isRequired })).isRequired }), _temp9));
  
  
  const ConcentrationForm = reduxForm({
    form: 'concentration',
    validate: validateFields({
      concentration: concentrationValidation }) })((_temp10 = _class10 =
  
  class extends React.Component {
  
  
  
  
  
  
  
    render() {
      return (
        React.createElement("form", { onSubmit: this.props.handleSubmit },
        React.createElement(FormSection, { name: "concentration" },
        React.createElement(ConcentrationTitleField, { options: this.props.concentrationOptions })),
  
        React.createElement(SubmitButton, { disabled: this.props.submitting })));
  
  
    }}, _defineProperty(_class10, "propTypes", { concentrationOptions: PropTypes.arrayOf(PropTypes.shape({ label: PropTypes.string.isRequired, value: PropTypes.string.isRequired })).isRequired }), _temp10));
  
  
  const FileUploadForm = reduxForm({
    form: 'fileUpload',
    validate: validateFields({
      fileUpload: fileUploadValidation }) })((_temp11 = _class11 =
  
  class extends React.Component {
  
  
  
    render() {
      return (
        React.createElement("form", { onSubmit: this.props.handleSubmit },
        React.createElement(FormSection, { name: "fileUpload" },
        React.createElement(FileUploadField, null)),
  
        React.createElement(SubmitButton, { disabled: this.props.submitting })));
  
  
    }}, _defineProperty(_class11, "propTypes", {}), _temp11));
  
  // END FORMS
  
  // BEGIN FORM FIELDS
  class SubmitButton extends React.Component {
    render() {
      return (
        React.createElement("button", {
          disabled: this.props.disabled,
          className: "c-form-button c-form-button--primary c-form-button--block",
          type: "submit" },
        'Submit'));
  
    }}
  
  
  class FileFields extends React.Component {
    render() {
      return (
        React.createElement("ul", null,
        React.createElement("li", null,
        React.createElement(DropzoneComponent, {
          onDrop: files => {
            this.props.fields.map((_, i) => ths.props.fields.remove(i));
            files.map(file => this.props.fields.push(file));
          } },
        'Drop files here')),
  
        this.props.meta.error &&
        React.createElement("li", { className: "u-red" }, this.props.meta.error),
  
        this.props.fields.map((file, index) =>
        React.createElement("li", { key: index },
        React.createElement("button", {
          onClick: () => this.props.fields.remove(index),
          type: "button" },
        'X'),
        React.createElement(Field, {
          name: `${file}.name`,
          component: TextDisplayControl })))));
  
  
  
  
  
    }}
  
  
  class FileUploadField extends React.Component {
    render() {
      return (
        React.createElement(FieldArray, {
          name: "files",
          component: FileFields,
          label: "Upload files" }));
  
  
    }}
  
  
  class UsernameField extends React.Component {
    render() {
      return (
        React.createElement(FormField, {
          icon: "Password",
          fields: [
          {
            name: 'username',
            placeholder: 'Username',
            type: 'text' }] }));
  
  
  
  
    }}
  
  
  class ConcentrationTitleField extends React.Component {
  
  
  
  
  
  
  
    render() {
      return (
        React.createElement(Field, {
          component: RadioControl,
          hint: "Pick a concentration",
          label: "Concentration",
          name: "title",
          options: this.props.options.map(o => ({
            ...o,
            classes: 'u-1/3',
            icon: 'Password' })) }));
  
  
  
    }}_defineProperty(ConcentrationTitleField, "propTypes", { options: PropTypes.arrayOf(PropTypes.shape({ label: PropTypes.string.isRequired, value: PropTypes.string.isRequired })).isRequired });
  
  
  class RoleTitleField extends React.Component {
  
  
  
  
  
  
  
    render() {
      return (
        React.createElement(Field, {
          component: RadioControl,
          hint: "Pick a role",
          label: "Role",
          name: "title",
          options: this.props.options.map(o => ({
            ...o,
            classes: 'u-1/3',
            icon: 'Password' })) }));
  
  
  
    }}_defineProperty(RoleTitleField, "propTypes", { options: PropTypes.arrayOf(PropTypes.shape({ label: PropTypes.string.isRequired, value: PropTypes.string.isRequired })).isRequired });
  
  
  class SpecializationTitleField extends React.Component {
  
  
  
  
  
  
  
    render() {
      return (
        React.createElement(Field, {
          component: RadioControl,
          hint: "Pick a specialization",
          label: "Specialization",
          name: "title",
          options: this.props.options.map(o => ({
            ...o,
            classes: 'u-1/3',
            icon: 'Password' })) }));
  
  
  
    }}_defineProperty(SpecializationTitleField, "propTypes", { options: PropTypes.arrayOf(PropTypes.shape({ label: PropTypes.string.isRequired, value: PropTypes.string.isRequired })).isRequired });
  
  
  class ProfessionTitleField extends React.Component {
  
  
  
  
  
  
  
    render() {
      return (
        React.createElement(Field, {
          component: RadioControl,
          hint: "Pick a profession",
          label: "Profession",
          name: "title",
          options: this.props.options.map(o => ({
            ...o,
            classes: 'u-1/3',
            icon: 'Password' })) }));
  
  
  
    }}
  
  // END FORM FIELDS
  
  // BEGIN FORM FIELD CONTROLS
  _defineProperty(ProfessionTitleField, "propTypes", { options: PropTypes.arrayOf(PropTypes.shape({ label: PropTypes.string.isRequired, value: PropTypes.string.isRequired })).isRequired });class FormField extends React.Component {// refactor, missing propTypes
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    renderFields(props) {
      const {
        fields,
        hint,
        icon } =
      props;
      const errors = fields.map(({ name }) => {
        const {
          meta: {
            error,
            touched }
          // refactor, ¯\_(ツ)_/¯ @ next line
        } = eval(`props.${name}`); // eslint-disable-line no-eval
        return touched && error; // refactor, `touched` might not be behaving as expected?
      }).filter(i => i);
      const error = errors[0] || props.error;
      const message = error || hint;
      const className = classNames({
        'c-form-field': true,
        'c-form-field--error': !!error });
  
      const Icon = SVGIcon[icon];
      return (
        React.createElement("div", { className },
        React.createElement("div", { className: "o-media" },
        React.createElement("div", { className: "o-media__img c-form-field__img" },
        icon && React.createElement(Icon, null)),
  
        React.createElement("div", { className: "o-media__body" },
        React.createElement("div", { className: "c-form-field__control" },
        fields.map((field, key) => {
          const {
            format,
            name,
            normalize,
            parse,
            placeholder,
            type } =
          field; // refactor, what else is in `props.${name}`?
          // refactor, I had to comment out the line below to make this work with FormSection
          // const {input} = eval(`props.${name}`); // eslint-disable-line no-eval
          const inputClassName = classNames({
            'c-form-field__input': true,
            '5625463739': false,
            [field.className]: field.className && true // refactor, `&& true`?  I don't get it
          });
          return (
            React.createElement(Field, _extends({
              className: inputClassName,
              component: "input" },
            { key, placeholder, type, format, normalize, parse, name })));
  
  
        })),
  
        React.createElement("div", { className: "c-form-field__hint" }, message)))));
  
  
  
  
    }
  
    render() {
      const {
        fields,
        hint,
        icon } =
      this.props;
      return (
        React.createElement(Fields, _extends({
          component: this.renderFields,
          names: fields.map(({ name }) => name) },
        { fields, hint, icon })));
  
  
    }}_defineProperty(FormField, "propTypes", { icon: PropTypes.string, fields: PropTypes.arrayOf(PropTypes.shape({ className: PropTypes.string, format: PropTypes.func, name: PropTypes.string.isRequired, normalize: PropTypes.func, parse: PropTypes.func, placeholder: PropTypes.string.isRequired, // refactor, is this really required?  Is this used for making checkboxes/radios?
      type: PropTypes.string.isRequired })), hint: PropTypes.string });
  
  class TextDisplayControl extends React.Component {
    render() {
      return (
        React.createElement("span", null, this.props.input.value));
  
    }}
  
  
  class TextInputControl extends React.Component {
  
  
  
  
  
    render() {
      const {
        input,
        type,
        placeholder,
        meta: {
          error,
          touched } } =
  
      this.props;
      const className = classNames({
        'c-input-control': true,
        'c-input-control--error': touched && error });
  
      return (
        React.createElement("div", { className },
        React.createElement("input", _extends({
          className: "c-input-control__input" },
        input,
        { type, placeholder })),
  
        React.createElement("div", { className: "c-input-control__hint c-text-small" }, touched && error)));
  
  
    }}_defineProperty(TextInputControl, "propTypes", { placeholder: PropTypes.string, type: PropTypes.string.isRequired });
  
  
  class RadioControl extends React.Component {
    handleChange(value) {
      return () => {
        this.props.input.onChange(value);
      };
    }
  
    render() {
      const {
        hint,
        input: {
          value,
          name },
  
        meta: {
          error,
          touched },
  
        options } =
      this.props;
      const message = touched && error || hint;
      const className = classNames({
        'c-form-radio': true,
        'c-form-radio--error': touched && !!error });
  
      return (
        React.createElement("div", { className },
        React.createElement("div", { className: "o-layout" },
        options.map((field, key) => {
          const Icon = SVGIcon[field.icon];
          const fieldClasses = field.classes || '';
          return (
            React.createElement("div", _extends({
              className: `c-form-radio__item o-layout__item ${fieldClasses}` },
            { key }),
  
            React.createElement("input", _extends({
              checked: value === field.value,
              className: "c-form-radio__field u-hidden-visually",
              id: `${name}-${key}`,
              onChange: this.handleChange(field.value),
              type: "radio",
              value: field.value },
            { name })),
  
            React.createElement("label", {
              className: "c-form-radio__label",
              htmlFor: `${name}-${key}` },
  
            field.icon && Icon && React.createElement(Icon, { active: value === field.value }),
            field.label)));
  
  
  
        }),
        React.createElement("div", { className: "o-layout__item u-1/1 c-form-radio__message" },
        React.createElement("div", { className: "c-form-radio__hint" }, message)))));
  
  
  
  
    }}
  
  // END FORM FIELD CONTROLS
  
  // BEGIN SELECTORS
  const getUiState = state => state.ui;
  
  const getJobApplicationsState = state => state.jobApplications;
  
  const getUsername = (state, ownProps) => {
    const jobApplicationsState = getJobApplicationsState(state, ownProps);
    return jobApplicationsState.username;
  };
  
  const getIsContactDetailsComplete = (state, ownProps) => {
    const username = getUsername(state, ownProps);
    return !!username;
  };
  
  const getParams = (state, ownProps) => {
    const uiState = getUiState(state, ownProps);
    return uiState.params;
  };
  
  const getParamsProfession = (state, ownProps) => {
    const params = getParams(state, ownProps);
    return params.profession;
  };
  
  const getParamsSpecialization = (state, ownProps) => {
    const params = getParams(state, ownProps);
    return params.specialization;
  };
  
  const getParamsRole = (state, ownProps) => {
    const params = getParams(state, ownProps);
    return params.role;
  };
  
  const getParamsConcentration = (state, ownProps) => {
    const params = getParams(state, ownProps);
    return params.concentration;
  };
  
  const getJobsConfig = () => professionsConfig;
  
  const getProfessionOptions = (state, ownProps) => {
    const jobsConfig = getJobsConfig(state, ownProps);
    return Object.keys(jobsConfig).map(professionKey => {
      const professionConfig = jobsConfig[professionKey];
      return {
        label: professionConfig.label,
        value: professionConfig.value };
  
    });
  };
  
  const getSpecializationOptions = (state, ownProps) => {
    const jobsConfig = getJobsConfig(state, ownProps);
    const profession = getParamsProfession(state, ownProps);
    const {
      specializations } =
    jobsConfig[profession];
    return Object.keys(specializations).map(specializationKey => {
      const specializationConfig = specializations[specializationKey];
      return {
        label: specializationConfig.label,
        value: specializationConfig.value };
  
    });
  };
  
  const getRoleOptions = (state, ownProps) => {
    const jobsConfig = getJobsConfig(state, ownProps);
    const profession = getParamsProfession(state, ownProps);
    const specialization = getParamsSpecialization(state, ownProps);
    const {
      roles } =
    jobsConfig[profession].specializations[specialization];
    return Object.keys(roles).map(roleKey => {
      const roleConfig = roles[roleKey];
      return {
        label: roleConfig.label,
        value: roleConfig.value };
  
    });
  };
  
  const getConcentrationOptions = (state, ownProps) => {
    const jobsConfig = getJobsConfig(state, ownProps);
    const profession = getParamsProfession(state, ownProps);
    const specialization = getParamsSpecialization(state, ownProps);
    const role = getParamsRole(state, ownProps);
    const {
      concentrations } =
    jobsConfig[profession].specializations[specialization].roles[role];
    return Object.keys(concentrations).map(concentrationKey => {
      const concentrationConfig = concentrations[concentrationKey];
      return {
        label: concentrationConfig.label,
        value: concentrationConfig.value };
  
    });
  };
  
  const getProgressPages = (state, ownProps) => {
    const lookup = [
    {
      label: 'Contact',
      complete: false,
      active: false },
    {
      label: 'Profession',
      complete: false,
      active: false },
    {
      label: 'Specialization',
      complete: false,
      active: false },
    {
      label: 'Role',
      complete: false,
      active: false },
    {
      label: 'Concentration',
      complete: false,
      active: false },
    {
      label: 'File Upload',
      complete: false,
      active: false },
    {
      label: 'Success',
      complete: false,
      active: false }];
  
  
    const index = parseInt(ownProps.routes[ownProps.routes.length - 1].wizardProgress, 10); // TODO refactor, i don't trust this...
    for (let i = 0; i < index; i++) {if (window.CP.shouldStopExecution(0)) break;
      lookup[i].complete = true;
    }window.CP.exitedLoop(0);
    lookup[index].active = true;
    return lookup;
  };
  // END SELECTORS
      //# sourceURL=pen.js
  